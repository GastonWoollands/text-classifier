name: Build and Deploy Docker Image

on:
  push:
    branches:
      - master
  pull_request:

env:
  PYTHON_VERSION: "3.10"
  AWS_REGION: us-east-1
  ECR_REPOSITORY: text-classifier
  EKS_CLUSTER_NAME: text-classifier-cluster
  NAMESPACE: text-classifier

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry, export plugin and Commitizen
      run: |
        python -m pip install --upgrade pip
        pip install poetry poetry-plugin-export commitizen

    - name: Export requirements.txt
      run: |
        poetry export -f requirements.txt --without-hashes -o requirements.txt

    - name: Get project version from Commitizen
      id: get_version
      run: echo "VERSION=$(cz version --project)" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$VERSION .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$VERSION

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Update kubeconfig
      run: |
        aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Render Kubernetes manifests with VERSION only
      env:
        VERSION: ${{ env.VERSION }}
      run: |
        mkdir -p k8s-rendered
        for f in k8s/*.yaml; do
          envsubst '${VERSION}' < "$f" > "k8s-rendered/$(basename "$f")"
        done

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f k8s-rendered/namespace.yaml
        kubectl apply -f k8s-rendered/deployment.yaml
        kubectl apply -f k8s-rendered/service.yaml

    - name: Wait for rollout to complete
      run: |
        kubectl rollout status deployment/text-classifier --namespace ${{ env.NAMESPACE }}
